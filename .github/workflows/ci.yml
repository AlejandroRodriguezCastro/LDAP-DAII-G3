name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    services:
      mongodb:
        image: mongo:5.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test_user
          MONGO_INITDB_ROOT_PASSWORD: test_password
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ismaster\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/ci-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r ci-requirements.txt

    - name: Create test environment file
      run: |
        cat > app/config/.env << EOF
        APP_NAME=LDAP-FastAPI-Test
        LOG_LEVEL=INFO
        DATABASE_URL=sqlite:///./test.db
        QUEUE_URL=redis://localhost:6379/0
        LDAP_URL=ldap://localhost:389
        LDAP_BIND_DN=cn=admin,dc=example,dc=com
        LDAP_BIND_PASSWORD=admin
        SECRET_KEY=test-secret-key-for-ci
        TOKEN_EXPIRATION=1h
        MONGO_USER=test_user
        MONGO_PASSWORD=test_password
        MONGO_URI=mongodb://localhost:27017
        MONGO_DB_NAME=test_ldap_database
        EOF

    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create environment file for build
      run: |
        cat > app/config/.env << EOF
        APP_NAME=LDAP-FastAPI
        LOG_LEVEL=INFO
        DATABASE_URL=sqlite:///./test.db
        QUEUE_URL=redis://localhost:6379/0
        LDAP_URL=ldap://localhost:389
        LDAP_BIND_DN=cn=admin,dc=example,dc=com
        LDAP_BIND_PASSWORD=admin
        SECRET_KEY=build-secret-key
        TOKEN_EXPIRATION=1h
        MONGO_USER=build_user
        MONGO_PASSWORD=build_password
        MONGO_URI=mongodb://localhost:27017
        MONGO_DB_NAME=build_ldap_database
        EOF

    - name: Test application startup
      run: |
        timeout 10 python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 5
        curl -f http://localhost:8000/docs || exit 1
        echo "Application started successfully!"

    - name: Build application artifact
      run: |
        mkdir -p dist
        cp -r app dist/
        cp requirements.txt dist/
        cp README.md dist/
        echo "Build completed successfully!"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: application-build
        path: dist/

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Security scan with Safety
      run: |
        pip install -r requirements.txt
        safety check

    - name: Security scan with Bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: bandit-report.json